name: Test, Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: ‚öôÔ∏è Set up repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv sync --group dev

      - name: üß™ Run tests
        run: |
          uv run pytest tests/ -v
  
  version:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: ‚öôÔ∏è Set up repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # important for tags

      - name: ‚öôÔ∏è Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv sync --group dev

      - id: psr
        uses: python-semantic-release/python-semantic-release@v10
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show computed version/tag
        run: |
          echo "Released:  ${{ steps.psr.outputs.released }}"
          echo "Version:   ${{ steps.psr.outputs.version }}"
          echo "Tag:       ${{ steps.psr.outputs.tag }}"

  build:
    needs: version
    if: |
      github.ref == 'refs/heads/main' &&
      steps.psr.outputs.released == 'true'
    environment: google-cloud
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.export.outputs.image_tag }}
    steps:
      - name: ‚öôÔ∏è Set up repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: ‚öôÔ∏è Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: '${{ vars.TURTLEQUANT1_GCLOUD_PROJECT_ID }}'

      - name: üîê Configure Docker authentication
        run: |
          gcloud auth configure-docker ${{ vars.TURTLEQUANT1_GCLOUD_REGION }}-docker.pkg.dev --quiet

      - name: üèóÔ∏è Build Docker image
        run: |
          IMAGE_TAG="${{ vars.TURTLEQUANT1_GCLOUD_REGION }}-docker.pkg.dev/${{ vars.TURTLEQUANT1_GCLOUD_PROJECT_ID }}/${{ vars.TURTLEQUANT1_GCLOUD_PROJECT_ID }}-gar-usea1-docker/turtle-quant-1:${{ steps.psr.outputs.version }}"
          
          echo "Building image..."
          docker build -t $IMAGE_TAG --platform linux/amd64 -f Dockerfile .

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: üì§ Push Docker image
        run: docker push $IMAGE_TAG

      - name: üì¶ Export image tag for downstream jobs
        id: export
        run: |
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    environment: google-cloud
    runs-on: ubuntu-latest
    steps:
      - name: ‚öôÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: ‚öôÔ∏è Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: '${{ vars.TURTLEQUANT1_GCLOUD_PROJECT_ID }}'

      - name: ‚öôÔ∏è Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: ‚öôÔ∏è Generate terraform.tfvars
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          sed -e "s|{{IMAGE_TAG}}|${{ needs.build.outputs.image_tag }}|g" \
              -e "s|{{TURTLEQUANT1_ENV}}|${{ vars.TURTLEQUANT1_ENV }}|g" \
              -e "s|{{TURTLEQUANT1_GCLOUD_REGION}}|${{ vars.TURTLEQUANT1_GCLOUD_REGION }}|g" \
              -e "s|{{TURTLEQUANT1_GCLOUD_PROJECT_ID}}|${{ vars.TURTLEQUANT1_GCLOUD_PROJECT_ID }}|g" \
              -e "s|{{TURTLEQUANT1_GCLOUD_STB_DATA_NAME}}|${{ vars.TURTLEQUANT1_GCLOUD_STB_DATA_NAME }}|g" \
              -e "s|{{TURTLEQUANT1_ALPHA_VANTAGE_API_KEY}}|${{ secrets.TURTLEQUANT1_ALPHA_VANTAGE_API_KEY }}|g" \
              -e "s|{{TURTLEQUANT1_MAX_WORKERS}}|${{ vars.TURTLEQUANT1_MAX_WORKERS }}|g" \
              terraform/p.tfvars.template > terraform/terraform.tfvars

      - name: ‚öôÔ∏è Terraform Init
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          rm -f .terraform.lock.hcl
          terraform init \
            -backend-config="bucket=${{ vars.TURTLEQUANT1_GCLOUD_PROJECT_ID }}-tfstate-${{ vars.TURTLEQUANT1_GCLOUD_REGION }}" \
            -backend-config="prefix=terraform/state" \
            -upgrade

      - name: ‚öôÔ∏è Terraform Validate
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: terraform validate

      - name: ‚öôÔ∏è Import Existing Resources
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          # Import Cloud Run service
          terraform import google_cloud_run_service.app ${{ vars.TURTLEQUANT1_GCLOUD_REGION }}/${{ vars.TURTLEQUANT1_GCLOUD_PROJECT_ID }}/${{ vars.TURTLEQUANT1_GCLOUD_PROJECT_ID }}-run-${{ vars.TURTLEQUANT1_GCLOUD_REGION }}-app || true
          
          # Import Cloud Storage buckets
          terraform import google_storage_bucket.data ${{ vars.TURTLEQUANT1_GCLOUD_STB_DATA_NAME }} || true

      - name: ‚öôÔ∏è Terraform Plan
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: terraform plan -out=tfplan

      - name: ‚öôÔ∏è Terraform Apply
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform apply -auto-approve tfplan

      - name: üßπ Cleanup
        if: always()
        run: |
          rm -f terraform/terraform.tfvars 